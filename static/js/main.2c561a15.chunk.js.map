{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","squareGrid","count","squareArray","j","push","renderSquare","makeRows","React","Component","Game","state","history","Array","fill","clicked","pastXIsNext","xIsNext","stepNumber","slice","current","length","calculateWinner","setState","concat","handleCompTurn","compChoice","openMoveArr","Math","floor","random","step","status","winner","moves","map","move","col","row","currPlay","desc","currPlayer","summary","id","style","fontWeight","jumpTo","includes","handleClick","start","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c561a15.chunk.js","sourcesContent":["import React from 'react'; // imports React library\r\nimport ReactDOM from 'react-dom'; // imports ReactDOM\r\nimport './index.css'; // imports file for css styling\r\n\r\n/* \r\nWhen called, this Square component will create a square button. \r\nThe button inherits the onClick method and the value property \r\nfrom the Board component. The value of the \"value\" property will\r\nbe displayed on the button.\r\n*/\r\nfunction Square(props) {\r\n  return (\r\n    <button \r\n      className=\"square\"\r\n      onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n/* \r\nThe primary job of the Board component is to make a grid of buttons (using\r\nthe Square component) to make the Tic-Tac-Toe game board.\r\n*/\r\nclass Board extends React.Component {\r\n  /*\r\n  This renderSquare method calls the Square component to make one button.\r\n  The method accepts one argument \"i\".\r\n  */\r\n  renderSquare(i) {\r\n    return (\r\n      /*\r\n      The value property is passed to the Square component. It is set equal\r\n      to the value that is held in the \"i\" index of the squares array that\r\n      is passed in via props. These props come from the Game component. This\r\n      value property is what will determine whether the Square will display \r\n      an \"X\", an \"O\", or nothing.\r\n\r\n      The onClick property is also passed to the Square component. It is set\r\n      equal to the onClick method that is passed in via props. These props come \r\n      from the Game component. This onClick value will call the handleClick method\r\n      from the Game component.\r\n      */\r\n      <Square \r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  // render function will actually make something appear on the screen\r\n  render() {\r\n    \r\n    /*\r\n    The primary function of this makeRows function is to set up a grid\r\n    of Squares and return it\r\n    */\r\n    const makeRows = () => {\r\n      let squareGrid = []; // creates a variable that will hold an array of arrays of Squares\r\n      let count = 0; // creates a variable that will keep count\r\n\r\n      // This loop will repeat three times\r\n      for (let i = 0; i < 3; i++) {\r\n        let squareArray = []; // creates a variable that will hold an array of Squares\r\n\r\n        // This loop will repeat three times\r\n        for (let j = 0; j < 3; j++) {\r\n          /* \r\n          During each iteration of the loop, this line of code creates a Square (by calling\r\n          the renderSquare method that, in turn, calls the Square component) and pushes\r\n          that Square onto the squareArray. The count variable is used as a key and is\r\n          also passed into the renderSquare method to be used as the renderSquare method's \"i\"\r\n          argument.\r\n          */\r\n          squareArray.push(<td key={count}>{this.renderSquare(count)}</td>);\r\n\r\n          // Adds one to the count\r\n          count++;\r\n        }\r\n\r\n        /*\r\n        During each iteration of this loop, this line of code pushes the squareArray that was created\r\n        in the inside loop onto the squareGrid array\r\n        */\r\n        squareGrid.push(\r\n          <tr key={i} className='board-row'>\r\n            {squareArray}\r\n          </tr>)\r\n      }\r\n\r\n      // returns the squareGrid array\r\n      return squareGrid;\r\n    }\r\n\r\n    // returns the squareGrid array (by calling the makeRows function) and puts it into a table\r\n    return (\r\n      <table>\r\n        <tbody>\r\n          {makeRows()}\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\n// The Game class is a stateful component that provides most of the game logic\r\nclass Game extends React.Component {\r\n\r\n  // Stateful components need a constructor\r\n  constructor(props) {\r\n    // super() must always be called in a constructor\r\n    super(props);\r\n\r\n    /*\r\n    This is the state of the Game component. It holds 4 important properties:\r\n\r\n    (1) A history array that will keep a record of every move made during the game.\r\n    (2) An xIsNext boolean that will remember whose turn is next.\r\n    (3) A stepNumber integer that will remember which move number we are on.\r\n    (4) A movesReversed boolean that will remember whether the moves have been\r\n    reversed on the game's status board.\r\n    */\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        clicked: null,\r\n        pastXIsNext: false,\r\n      }],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      //movesReversed: false, -- THIS FEATURE HAS BEEN REMOVED\r\n    };\r\n  }\r\n\r\n  /*\r\n  This handleClick function determines what happens when any of the Squares on the\r\n  Board are clicked. The \"i\" argument that is passed in is the count variable from \r\n  the makeRows function of the Board component. This means that each Square will\r\n  pass in it's own unique number between 0-8 into this function.\r\n  */\r\n  handleClick(i) {\r\n\r\n    /* THIS FEATURE HAS BEEN REMOVED\r\n    Since this game gives the players the option to reverse the list of past moves on\r\n    the game's status board, this if statement will put the list of past moves back\r\n    in the original order if the list is currently reversed. It calls the handleReorder\r\n    method to accomplish this. \r\n    */\r\n    // if (!this.state.movesReversed) {\r\n    //   this.handleReorder();\r\n    // }\r\n\r\n    // Makes a variable that holds a copy of the history array that is held in state\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\r\n    // Creates a variable that holds the last object in the history array\r\n    const current = history[history.length - 1];\r\n\r\n    // Makes a copy of the squares array of the last object in the history array\r\n    const squares = current.squares.slice();\r\n\r\n    // Creates a variable that holds the value of the \"pastXIsNext\" property of the\r\n    // last object in the history array\r\n    const pastXIsNext = current.pastXIsNext;\r\n\r\n    // This if statement returns early from the handleClick function if there is a\r\n    // winner or if the square has already been clicked.\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    \r\n    /*\r\n    This line of code determines the value that will be put into the element of the squares\r\n    array whose index corresponds to the Square that was clicked. If it is X's turn, an \"X\" \r\n    will be displayed. If it is O's turn, an \"O\" will be displayed.\r\n\r\n    This line of code also determines the value that will be passed to the Board component and then\r\n    to the particular Square component. This value will be displayed on the button.\r\n    If it is X's turn, an \"X\" will be displayed. If it is O's turn, an \"O\" will be displayed.\r\n    */\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n    // Sets the new state\r\n    this.setState({\r\n      // A new object is added to the end of the history array\r\n      history: history.concat([{\r\n        // This property will hold the new squares array that\r\n        // includes the most recent move\r\n        squares: squares,\r\n\r\n        // This property will hold the record of which Square\r\n        // was clicked\r\n        clicked: i,\r\n\r\n        // This property will hold the record of whose turn\r\n        // it was\r\n        pastXIsNext: !pastXIsNext,\r\n      }]),\r\n\r\n      // Toggles whose turn it is in state\r\n      xIsNext: !this.state.xIsNext,\r\n\r\n      // Updates what turn number we are on\r\n      stepNumber: history.length,\r\n    }, this.handleCompTurn); // handleCompTurn is called after setState is complete\r\n  }\r\n\r\n  // This function allows the computer to take its turn\r\n  handleCompTurn() {\r\n    // Creates a variable that holds a copy of the history array from state\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\r\n    // Creates a variable that holds a copy of the last object in the history array\r\n    const current = history[history.length - 1];\r\n    \r\n    // Creates a variable that holds a copy of the squares array of the last object in the history array\r\n    const squares = current.squares.slice();\r\n    \r\n    // Creates a variable that holds a copy of the value of the pastXIsNext property of the last object in the history array\r\n    const pastXIsNext = current.pastXIsNext;\r\n\r\n    // Creates a variable that holds an empty array\r\n    let openMoveArr = [];\r\n\r\n    // Creates a variable that will hold a random number\r\n    let randIndex;\r\n\r\n    // Creates a variable that will hold the index of the squares array that \"the computer\" will choose\r\n    let compChoice;\r\n    \r\n    // This for loop will iterate through the entire squares array\r\n    for (var j = 0; j < squares.length; j++) {\r\n      // If the element at the particular index of the squares array is null (meaning that it has not been played yet)...\r\n      if (!squares[j]) {\r\n        //... then push that index number onto the openMoveArr array\r\n        openMoveArr.push(j);\r\n      }\r\n    }\r\n\r\n    // If there is a winner or if there are no more available moves...\r\n    if (calculateWinner(squares) || openMoveArr.length <= 0) {\r\n      //... then return early from the handleCompTurn function\r\n      return;\r\n    }\r\n\r\n    // Sets randIndex equal to a random index of the openMoveArr array\r\n    randIndex = Math.floor(Math.random() * openMoveArr.length);\r\n\r\n    // Sets compChoice equal to the number located at the randIndex of the openMoveArr array\r\n    compChoice = openMoveArr[randIndex];\r\n\r\n    // Sets the value of the chosen element of the squares array based on whose turn it is\r\n    squares[compChoice] = this.state.xIsNext ? \"X\" : \"O\";\r\n\r\n    // Updates state\r\n    this.setState({\r\n      // Adds a new object to the end of the history array\r\n      history: history.concat([{\r\n        // Squares will reflect the most recent move\r\n        squares: squares,\r\n\r\n        // Remembers which square the computer chose this turn\r\n        clicked: compChoice,\r\n\r\n        // Remembers whose turn it was on this most recent turn\r\n        pastXIsNext: !pastXIsNext,\r\n      }]),\r\n      // Toggles whose turn it is in state\r\n      xIsNext: !this.state.xIsNext,\r\n\r\n      // Updates the turn number\r\n      stepNumber: history.length\r\n    })\r\n  }\r\n\r\n  // // THIS FEATURE HAS BEEN REMOVED -- This handleReorder function controls the reversing of the list of past moves\r\n  // handleReorder() {\r\n  //   // Creates a variable that represents the unordered list in the DOM\r\n  //   // (the unordered list is the list of past moves)\r\n  //   var movesList = document.getElementById(\"movesList\");\r\n\r\n  //   // Creates a variable that holds the # of children (items) that the unordered\r\n  //   // list has\r\n  //   var i = movesList.childNodes.length;\r\n\r\n  //   // While i >= 0, the code in curly braces will execute, then subtract 1 from i\r\n  //   while (i--) {\r\n  //     /*\r\n  //     For each item in the unordered list, starting with the last one, this line of\r\n  //     code will take the item out of its original location and place it at the end\r\n  //     of the list. The end result of this will be a reversal of the original list.\r\n  //     */\r\n  //     movesList.appendChild(movesList.childNodes[i]);\r\n  //   }\r\n\r\n  //   // Sets the new state\r\n  //   this.setState({\r\n  //     // Since the list was just reversed, the movesReversed boolean must be toggled\r\n  //     // so that state knows whether the list is in the default order (start -> finish)\r\n  //     // or in reverse order (finish -> start)\r\n  //     movesReversed: !this.state.movesReversed,\r\n  //   });\r\n  // }\r\n\r\n  /*\r\n  The jumpTo method is used when the user decides to go back to a previous move (or state).\r\n  The state is \"updated\" to reflect the selected past move. The step argument represents the\r\n  selected past move number.\r\n  */\r\n  jumpTo(step) {\r\n    // Sets the new state\r\n    this.setState({\r\n      // stepNumber is set to the selected past move number\r\n      stepNumber: step,\r\n\r\n      // The state needs to know whose turn it was on the selected past move number. Since X\r\n      // has their turn only on \"turn 0\" and every even turn, the equation will evaluate to true\r\n      // if the step number that is passed in is 0 or an even number. Otherwise, it will\r\n      // evaluate to false, meaning that it is O's turn. \r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  // render function will actually make something appear on the screen\r\n  render() {\r\n    // Creates a variable that holds a copy of the history array that is in state\r\n    const history = this.state.history.slice();\r\n\r\n    // Creates a variable that holds the object that is in the index of the history\r\n    // array that corresponds to the current stepNumber.\r\n    const current = history[this.state.stepNumber];\r\n\r\n    // Creates a variable that holds the return value of the calculateWinner function.\r\n    // (The return value will be either \"X\", \"O\", or, in the case of a draw, null.)\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    \r\n    //The moves mapping function repeats for every object in the history array\r\n    const moves = history.map((step, move) => {\r\n      // Creates a variable that holds the value of clicked for the object that is in\r\n      // the specified index of the history array\r\n      const currPlay = history[move].clicked;\r\n\r\n      // Creates a variable that will hold a column number\r\n      let col;\r\n\r\n      // Creates a variable that will hold a row number\r\n      let row;\r\n      \r\n      /*\r\n      Creates a variable that will hold a string. The text of this string will depend\r\n      on the index that is passed into the moves mapping function. If an index of 0 is passed in, \r\n      the first part of the ternary operator will evaluate to false. For every other index, the\r\n      first part of the ternary operator will evaluate to true.\r\n      */\r\n      const desc = move ?\r\n        'Go to move #' + move :\r\n        'Go to game start';\r\n\r\n      // Creates a variable that will hold a string. The text of this string will\r\n      // depend on whether the boolean pastXIsNext is true or false for the object\r\n      // that is in the specified index of the history array.\r\n      const currPlayer =  history[move].pastXIsNext ? 'X' : 'O';\r\n\r\n      // This switch statement will set the column and row values based on the index number that\r\n      // is passed in\r\n      switch (currPlay) {\r\n        case 0:\r\n          col = 1;\r\n          row = 1;\r\n          break;\r\n        case 1:\r\n          col = 2;\r\n          row = 1;\r\n          break;\r\n        case 2:\r\n          col = 3;\r\n          row = 1;\r\n          break;\r\n        case 3:\r\n          col = 1;\r\n          row = 2;\r\n          break;\r\n        case 4:\r\n          col = 2;\r\n          row = 2;\r\n          break;\r\n        case 5:\r\n          col = 3;\r\n          row = 2;\r\n          break;\r\n        case 6:\r\n          col = 1;\r\n          row = 3;\r\n          break;\r\n        case 7:\r\n          col = 2;\r\n          row = 3;\r\n          break;\r\n        case 8:\r\n          col = 3;\r\n          row = 3;\r\n          break;\r\n        default:\r\n          break; \r\n      }\r\n\r\n      // Creates a variable that will hold a string. The text of the string will depend on the\r\n      // value of the index that is passed in via the \"move\" argument. For an index of 0, there\r\n      // will be an empty string.\r\n      const summary = move ?\r\n        currPlayer + ' played on coordinate ' + col + ', ' + row :\r\n        ''\r\n      \r\n      /*\r\n      Returns a list item for each object in the history array. Each list item uses variables (instead\r\n      of hard-coded values) so that different text is shown for each list item. The style property uses a\r\n      ternary operator for conditional styling (the text will be bold if that particular move in the list\r\n      is the current move). The button's onClick property implements the jumpTo method in order to manage\r\n      state while returning to a previous move in the list.\r\n      */\r\n      return (\r\n        <li id='item' \r\n          key={move}\r\n          style={this.state.stepNumber === move ? \r\n            {fontWeight: 'bold'} : {fontWeight: 'normal'}}>\r\n          <div>{summary}</div>\r\n\r\n          {\r\n            /* If on \"move 0\" (start of the game) or on an even-numbered move (meaning the computer just took its turn)...*/\r\n            (move % 2 === 0) && \r\n\r\n            /*... then a button will be rendered that allows the user to return to that move. This prevents the user from being able to go back and alter moves that the computer made. */\r\n            (<button onClick={() => this.jumpTo(move)}>\r\n              {desc}\r\n            </button>)\r\n          }\r\n        </li>\r\n      );\r\n    });\r\n\r\n    // Creates a variable that will hold text for the status\r\n    let status;\r\n\r\n    // If the value that is returned from the calculateWinner function is not null...\r\n    if (winner) {\r\n      // then the status displays who won.\r\n      status = 'Winner: ' + winner;\r\n    } else if (current.squares.includes(null)) {\r\n      // If the squares array includes null (meaning that there are still some empty spaces\r\n      // on the game board), then the status displays whose turn it is.\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    } else {\r\n      // Otherwise, the status indicates a draw\r\n      status = 'Result: Draw!'\r\n    }\r\n\r\n    /*\r\n    Returns the game board and a status panel. The Board component is passed the squares property,\r\n    which is used by the Board component to determine the value that is displayed in each Square.\r\n    The Board component is also passed the handleClick method, which controls what happens when the\r\n    Squares on the Board are clicked. The status panel displays a status message, the list of past\r\n    moves held by the moves variable, and a button that allows the user to reverse the order of the\r\n    steps. The button implements the handleReorder method in order to reverse the order of the steps.\r\n    */\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares = {current.squares}\r\n            onClick = {(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"game-info\">\r\n          <div id=\"status\">{status}</div>\r\n          <div id=\"historyTitle\">Past Moves:</div>\r\n          <ol id='movesList' start=\"0\">\r\n            {moves}\r\n          </ol>\r\n          {/* <button id='toggleButton' onClick={() => this.handleReorder()}>Reverse Steps</button> -- THIS FEATURE HAS BEEN REMOVED*/}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// This function calculates the winner of the game. The squares argument represents the squares\r\n// array that is held in state.\r\nfunction calculateWinner(squares) {\r\n  // Creates a variable that holds an array of arrays. Each array inside this array represents\r\n  // a line of squares that, if they all hold the same value (\"X\" or \"O\"), would result in a win.\r\n  // All possible winning lines of squares (win conditions) are accounted for in this array.\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  // This loop will iterate through the lines array, checking each win condition\r\n  for (let i = 0; i < lines.length; i++) {\r\n    // Destructuring of the lines array\r\n    const [a, b, c] = lines[i];\r\n\r\n    // If the specified indexes of the passed in squares array all have the same non-null\r\n    // value (either \"X\" or \"O\")...\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      // then return the value (either \"X\" or \"O\") that they have in common\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  // If the for loop finishes executing without returning a winner, then null is returned,\r\n  // meaning there is not a winner yet.\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\n// This line of code renders the Game component inside the div element that has an id of\r\n// \"root\". This element is located in the index.html file that is in the public folder.\r\nReactDOM.render(<Game />, document.getElementById('root'));"],"sourceRoot":""}